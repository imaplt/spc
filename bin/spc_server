#!/opt/spc/venv/bin/activate python3

import argparse
import os
import time

WORKING_DIR = "/opt/spc"

parser = argparse.ArgumentParser(description="SPC Service")
parser.add_argument("command", choices=["start", "stop", "restart"], help="Command")
parser.add_argument("--foreground", action=argparse.BooleanOptionalAction, help="Run server on forground")
parser.add_argument("--mqtt-host", help="MQTT hostname")
parser.add_argument("--mqtt-port", help="MQTT port number")
parser.add_argument("--mqtt-username", help="MQTT username")
parser.add_argument("--mqtt-password", help="MQTT password")
parser.add_argument("--ssl", action=argparse.BooleanOptionalAction, help="SSL enable")
parser.add_argument("--ssl-ca-cert", help="SSL CA cert file path")
parser.add_argument("--ssl-cert", help="SSL cert")
parser.add_argument("-r", "--reflash-interval", help="Data update Interval")
parser.add_argument("-R", "--retry-interval", type=int, help="Retry interval after error")
parser.add_argument("-m", "--fan-mode", choices=["auto", "quiet", "normal", "performance"], help="Fan mode")
parser.add_argument("-t", "--temperature-unit", choices=["C", "F"], help="Temperature unit")
parser.add_argument("-w", "--rgb-switch", type=bool, help="RGB switch")
parser.add_argument("-y", "--rgb-style", choices=["breath", "leap", "flow", "raise_up", "colorful"], help="RGB style")
parser.add_argument("-c", "--rgb-color", help="RGB color")
parser.add_argument("-p", "--rgb-speed", help="RGB speed")
parser.add_argument("-f", "--rgb-pwm-frequency", type=int, help="RGB PWM frequency")
parser.add_argument("-i", "--rgb-pin", choices=["spi", "10", "pwm", "12", "pcm", "21"], help="RGB pin")

args = parser.parse_args()

def runcommand(command, options={}, venv=True, background=False):
    for key in options:
        if options[key] is not None:
            command += f" {key} {options[key]}"
    if background:
        command += " &"
    # command = f"bash -c '{command}'"
    if venv:
        command = f"source {WORKING_DIR}/venv/bin/activate && {command}"
    command = f"bash -c '{command}'"
    print(f"Run command: {command}")
    os.system(command)

def start():
    os.chdir(WORKING_DIR)
    mqtt_options = {
        "-H": args.mqtt_host,
        "-p": args.mqtt_port,
        "-u": args.mqtt_username,
        "-P": args.mqtt_password
    }
    auto_options = {
        "-r": args.reflash_interval,
        "-R": args.retry_interval,
        "-m": args.fan_mode,
        "-t": args.temperature_unit,
        "-w": args.rgb_switch,
        "-y": args.rgb_style,
        "-c": args.rgb_color,
        "-p": args.rgb_speed,
        "-f": args.rgb_pwm_frequency,
        "-i": args.rgb_pin
    }
    dashboard_options = {}
    if args.ssl:
        dashboard_options = {
            "--ssl": "",
            "--ssl-ca-cert": args.ssl_ca_cert,
            "--ssl-cert": args.ssl_cert
        }
    runcommand("spc_mqtt_client", options=mqtt_options, background=True)
    runcommand("spc_auto start", options=auto_options, background=True)
    runcommand("spc_dashboard", options=dashboard_options, background=True)
    if args.foreground:
        try:
            while True:
                time.sleep(10)
        finally:
            print("Terminated")
            stop()


def stop_process(name):
    pid = os.popen(f'ps -ef | grep "{name}" | awk "{{print $2}}"').read()
    pid = " ".join(pid.split("\n")[:-2])
    command = f"kill {pid}"
    runcommand(command)

def stop():
    stop_process("spc_mqtt_client")
    stop_process("spc_auto")
    stop_process("spc_dashboard")

if args.command == "start":
    start()
    print("SPC Started")
elif args.command == "stop":
    stop()
    print("SPC Stopped")
elif args.command == "restart":
    stop()
    start()
    print("SPC Restarted")
